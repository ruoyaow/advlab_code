"""lab3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSMukaAQ9RwUP2EFVfp_3gmy6anEqjen
"""

"""2.1 Attack Human-Detection

(1) Detect without patch
Utilize the apis in detect.py to recognize images of people. Feel free to edit the source code if itâ€™s needed. The result should be plotted after running the code.
"""

# Commented out IPython magic to ensure Python compatibility.
# Your code starts here
# Hint: To directly run the main function in a file, use 
# %run file_name.py param1 param2 ...
import glob
import os
import subprocess
import sys
from detect import detect
from test_patch import patch_apply_custom

# detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'testperson')

"""(2) Train patches
Now we will train two patches by ourselves. One of the patches has a starter image as input and the other one is completely generated by our code. To do these, please 


*   Take a look at train_patch.py and edit the relevant code.
*   Write a wrapped-up api for generating these two kinds of patches.
*   Call the api to generate a with-starter-image patch and a without-starter-image patch.

Please make sure to save these images since you need to use them in the next step.
"""
from train_patch import PatchTrainer


def patch_training_caller(starter_img=None, patch_save_name="", target_class=0):
    # Your code starts here
    trainer = PatchTrainer(mode="paper_obj", target_class=target_class)
    trainer.train(starter_img, patch_save_name, n_epochs=1000)


patch_training_caller(starter_img="patches/object_score.png", patch_save_name="personwstart")
patch_training_caller(patch_save_name="personwostart")

patch_apply_custom("testperson", "saved_patches/patchnew_" + "personwstart" + ".jpg", 0, "person_applied_wstart")
detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'person_applied_wstart')
patch_apply_custom("testperson", "saved_patches/patchnew_" + "personwostart" + ".jpg", 0, "person_applied_wostart")
detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'person_applied_wostart')
'''
if len(sys.argv) == 2:
  if bool(int(sys.argv[1])):
    # Call patch_training_caller to generate a patch with starter image
    # Your code starts here
    patch_training_caller(starter_img="patches/object_score.png", patch_save_name="personwstart")

    # Call patch_training_caller to generate a patch without starter image
    # Your code starts here
    patch_training_caller(patch_save_name="personwostart")

    """(3) Detect people with patches
    Use the same api in detect.py as section 2.1 (1) to detect people who hold the patch picture you generated in 2.1 (2). The model should not recognize the people in this case. 
    """
  else:
    files_to_remove = glob.glob('testperson/*_pred.jpg')
    for file in files_to_remove:
        os.remove(file)
    patch_apply_custom("testperson", "saved_patches/patchnew_"+"personwstart"+".jpg", 0, "person_applied_wstart")
    detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'person_applied_wstart')
    patch_apply_custom("testperson", "saved_patches/patchnew_"+"personwostart"+".jpg", 0, "person_applied_wostart")
    detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'person_applied_w0start')

else:
  raise ValueError()
'''

# Your code starts here

"""2.2 Attack Stop Signs-Detection

(1) Detect without patch
Similar to 2.1 (1), first we need to use apis in detect.py to recognize images of stop signs.
"""

# Your code starts here

"""(2) Patch stop signs
* Edit the source code involved in the patch-sticking control flow to attach the patch image on all the stop sign images. Images belonging to any other class (i.e. people, horses, etc.) should not be patched.
* Write a wrapped-up api for sticking patches on stop signs.
* Call the api to stick patch on stop sign. You should specify which patch is used in parameter.

"""


def patch_sticking_caller(clean_img, patch_img, target_class, save_dir):
    # If there's no stop sign in the image, the image should not be patched.
    # Your code starts here
    patch_apply_custom(clean_img, patch_img, target_class, save_dir)


# Call patch_sticking_caller to stick a patch on stop sign image.
# Your code starts here
patch_sticking_caller("teststop", "saved_patches/patchnew_" + "personwstart" + ".jpg", 11, "stop_applied_wstart")

"""(3) Detect stop sign with patch
Use the same api in detect.py as section 2.2 (1) to detect the patched stop sign. The model should not recognize the stop sign in this case. 
"""
detect('cfg/yolov2.cfg', 'weights/yolo.weights', 'stop_applied_wstart')
# Your code starts here
